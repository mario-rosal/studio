"use client";

import React, { useState, useMemo } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { executions } from '@/lib/data';

export function OutputsTable() {
  const [flowNameFilter, setFlowNameFilter] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');

  const filteredOutputs = useMemo(() => {
    return executions.filter(exec => {
      const flowNameMatch = exec.flowName.toLowerCase().includes(flowNameFilter.toLowerCase());
      const statusMatch = statusFilter === 'all' || exec.status === statusFilter;
      return flowNameMatch && statusMatch;
    });
  }, [flowNameFilter, statusFilter]);
  
  const statuses = useMemo(() => ['all', ...Array.from(new Set(executions.map(e => e.status)))], []);

  return (
    <Card>
      <CardHeader>
        <CardTitle>All Outputs</CardTitle>
        <CardDescription>A complete log of all outputs generated by your automations.</CardDescription>
        <div className="flex items-center gap-4 pt-4">
          <Input
            placeholder="Filter by Flow Name..."
            value={flowNameFilter}
            onChange={e => setFlowNameFilter(e.target.value)}
            className="max-w-sm"
          />
          <Select value={statusFilter} onValueChange={setStatusFilter}>
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Filter by Status" />
            </SelectTrigger>
            <SelectContent>
              {statuses.map(status => (
                 <SelectItem key={status} value={status}>
                    <span className="capitalize">{status}</span>
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </CardHeader>
      <CardContent>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Flow Name</TableHead>
              <TableHead>Timestamp</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Type</TableHead>
              <TableHead>Data</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredOutputs.length > 0 ? (
                filteredOutputs.map(exec => (
                <TableRow key={exec.id}>
                  <TableCell className="font-medium">{exec.flowName}</TableCell>
                  <TableCell>{new Date(exec.timestamp).toLocaleString()}</TableCell>
                  <TableCell>
                    <Badge variant={exec.status === 'Success' ? 'default' : 'destructive'} className={exec.status === 'Success' ? 'bg-green-500' : ''}>
                        {exec.status}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <Badge variant="outline" className="capitalize">{exec.output.type}</Badge>
                  </TableCell>
                  <TableCell className="font-mono text-xs">{exec.output.data}</TableCell>
                </TableRow>
              ))
            ) : (
                <TableRow>
                    <TableCell colSpan={5} className="h-24 text-center">
                        No results found.
                    </TableCell>
                </TableRow>
            )}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
}
